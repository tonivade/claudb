plugins {
  id 'java-library'
  id 'jacoco-report-aggregation'
  id 'test-report-aggregation'
  id 'maven-publish'
  id 'signing'
  alias(libs.plugins.nexus)
  alias(libs.plugins.versions)
}

dependencies {
  subprojects.forEach {
    jacocoAggregation it
    testReportAggregation it
  }
}

reporting {
  reports {
    testCodeCoverageReport(JacocoCoverageReport) {
      testSuiteName = "test"
    }
    testAggregateTestReport(AggregateTestReport) {
      testSuiteName = "test"
    }
  }
}

tasks.named('check') {
  dependsOn tasks.named('testCodeCoverageReport', JacocoReport)
  dependsOn tasks.named('testAggregateTestReport', TestReport)
}

allprojects {
  apply plugin: 'java-library'
  apply plugin: 'jacoco'
  apply plugin: 'maven-publish'
  apply plugin: 'signing'

  group = 'com.github.tonivade'

  ext.isReleaseVersion = !version.endsWith("SNAPSHOT")

  java {
    toolchain {
      languageVersion = JavaLanguageVersion.of(8)
    }
    withJavadocJar()
    withSourcesJar()
  }

  jacoco {
    toolVersion = "0.8.9"
  }

  repositories {
    mavenLocal() 
    mavenCentral()
    maven {
      url = 'https://central.sonatype.com/repository/maven-snapshots/'
    }
  }

  test {
    useJUnitPlatform()

    jacoco {
      destinationFile = file("${buildDir}/jacoco/test.exec")
    }
  }

  jacocoTestReport {
    reports {
      xml.required = true
      html.required = true
      xml.outputLocation = file("${buildDir}/reports/jacoco/report.xml")
    }
  } 
}

subprojects {
  publishing {
    publications {
      mavenJava(MavenPublication) {

        if (project.name == 'claudb-lib') {
          artifactId = 'claudb'
        } else if (project.name == 'claudb-app') {
          artifact("${buildDir}/libs/claudb-app-${version}-all.jar") {
            classifier = 'all'
            extension = 'jar'
          }
        }

        from components.java

        pom {
          name = 'ClauDB'
          description = 'ClauDB is a REDIS implementation in Java'
          url = 'https://github.com/tonivade/claudb'
          inceptionYear = '2015'

          scm {
            url = 'https://github.com/tonivade/claudb'
            connection = 'scm:https://github.com/tonivade/claudb.git'
            developerConnection = 'scm:git://github.com/tonivade/claudb.git'
          }

          licenses {
            license {
              name = 'The MIT License (MIT)'
              url = 'https://github.com/tonivade/claudb/blob/master/LICENSE'
              distribution = 'repo'
            }
          }

          developers {
            developer {
              id = 'tonivade'
              name = 'Antonio Mu√±oz'
              email = 'antoniogmc@gmail.com'
            }
          }
        }
      }
    }
  }

  signing {
    def signingKey = project.findProperty("signingKey")
    def signingPassword = project.findProperty("signingPassword")
    useInMemoryPgpKeys(signingKey, signingPassword)
    sign publishing.publications.mavenJava
  }

  tasks.withType(Sign) {
    onlyIf { isReleaseVersion }
  }
}

nexusPublishing {
  repositories {
    sonatype {
      nexusUrl.set(uri("https://ossrh-staging-api.central.sonatype.com/service/local/"))
      snapshotRepositoryUrl.set(uri("https://central.sonatype.com/repository/maven-snapshots/"))
    }
  }

  clientTimeout = Duration.ofSeconds(300)
  connectTimeout = Duration.ofSeconds(60)

  transitionCheckOptions {
    maxRetries.set(40)
    delayBetween.set(java.time.Duration.ofMillis(3000))
  }
}
